// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// eigen2arma
arma::mat eigen2arma(Eigen::MatrixXd eigen_A);
RcppExport SEXP _pcCov_eigen2arma(SEXP eigen_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type eigen_A(eigen_ASEXP);
    rcpp_result_gen = Rcpp::wrap(eigen2arma(eigen_A));
    return rcpp_result_gen;
END_RCPP
}
// arma2eigen
Eigen::MatrixXd arma2eigen(arma::mat arma_A);
RcppExport SEXP _pcCov_arma2eigen(SEXP arma_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type arma_A(arma_ASEXP);
    rcpp_result_gen = Rcpp::wrap(arma2eigen(arma_A));
    return rcpp_result_gen;
END_RCPP
}
// eigenMult2
arma::mat eigenMult2(arma::mat A, arma::mat B);
RcppExport SEXP _pcCov_eigenMult2(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMult2(A, B));
    return rcpp_result_gen;
END_RCPP
}
// eigenMult3
arma::mat eigenMult3(arma::mat A, arma::mat B, arma::mat C);
RcppExport SEXP _pcCov_eigenMult3(SEXP ASEXP, SEXP BSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMult3(A, B, C));
    return rcpp_result_gen;
END_RCPP
}
// eigenMult4
arma::mat eigenMult4(arma::mat A, arma::mat B, arma::mat C, arma::mat D);
RcppExport SEXP _pcCov_eigenMult4(SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMult4(A, B, C, D));
    return rcpp_result_gen;
END_RCPP
}
// invCov2part_cpp
arma::mat invCov2part_cpp(arma::mat icmat);
RcppExport SEXP _pcCov_invCov2part_cpp(SEXP icmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type icmat(icmatSEXP);
    rcpp_result_gen = Rcpp::wrap(invCov2part_cpp(icmat));
    return rcpp_result_gen;
END_RCPP
}
// cov2corr_cpp
arma::mat cov2corr_cpp(arma::mat cmat);
RcppExport SEXP _pcCov_cov2corr_cpp(SEXP cmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type cmat(cmatSEXP);
    rcpp_result_gen = Rcpp::wrap(cov2corr_cpp(cmat));
    return rcpp_result_gen;
END_RCPP
}
// corrMat_cpp
arma::mat corrMat_cpp(arma::mat tsData, bool partial);
RcppExport SEXP _pcCov_corrMat_cpp(SEXP tsDataSEXP, SEXP partialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type tsData(tsDataSEXP);
    Rcpp::traits::input_parameter< bool >::type partial(partialSEXP);
    rcpp_result_gen = Rcpp::wrap(corrMat_cpp(tsData, partial));
    return rcpp_result_gen;
END_RCPP
}
// cosTaper_cpp
NumericVector cosTaper_cpp(IntegerVector u);
RcppExport SEXP _pcCov_cosTaper_cpp(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(cosTaper_cpp(u));
    return rcpp_result_gen;
END_RCPP
}
// expTaper_cpp
NumericVector expTaper_cpp(IntegerVector u);
RcppExport SEXP _pcCov_expTaper_cpp(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(expTaper_cpp(u));
    return rcpp_result_gen;
END_RCPP
}
// crossCov_cpp
double crossCov_cpp(int u, arma::vec ts1, arma::vec ts2);
RcppExport SEXP _pcCov_crossCov_cpp(SEXP uSEXP, SEXP ts1SEXP, SEXP ts2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ts1(ts1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ts2(ts2SEXP);
    rcpp_result_gen = Rcpp::wrap(crossCov_cpp(u, ts1, ts2));
    return rcpp_result_gen;
END_RCPP
}
// crossCov2_cpp
arma::mat crossCov2_cpp(int u, arma::vec ts1, arma::vec ts2);
RcppExport SEXP _pcCov_crossCov2_cpp(SEXP uSEXP, SEXP ts1SEXP, SEXP ts2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ts1(ts1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ts2(ts2SEXP);
    rcpp_result_gen = Rcpp::wrap(crossCov2_cpp(u, ts1, ts2));
    return rcpp_result_gen;
END_RCPP
}
// taperCov_cpp
arma::mat taperCov_cpp(arma::vec ts1, arma::vec ts2, int banw);
RcppExport SEXP _pcCov_taperCov_cpp(SEXP ts1SEXP, SEXP ts2SEXP, SEXP banwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ts1(ts1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ts2(ts2SEXP);
    Rcpp::traits::input_parameter< int >::type banw(banwSEXP);
    rcpp_result_gen = Rcpp::wrap(taperCov_cpp(ts1, ts2, banw));
    return rcpp_result_gen;
END_RCPP
}
// taperCovSub_cpp
arma::mat taperCovSub_cpp(arma::vec ts1, arma::vec ts2, int banw, arma::vec hu2s);
RcppExport SEXP _pcCov_taperCovSub_cpp(SEXP ts1SEXP, SEXP ts2SEXP, SEXP banwSEXP, SEXP hu2sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ts1(ts1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ts2(ts2SEXP);
    Rcpp::traits::input_parameter< int >::type banw(banwSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hu2s(hu2sSEXP);
    rcpp_result_gen = Rcpp::wrap(taperCovSub_cpp(ts1, ts2, banw, hu2s));
    return rcpp_result_gen;
END_RCPP
}
// upperTriFill_cpp
arma::mat upperTriFill_cpp(int n, arma::vec x);
RcppExport SEXP _pcCov_upperTriFill_cpp(SEXP nSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(upperTriFill_cpp(n, x));
    return rcpp_result_gen;
END_RCPP
}
// partialCov_cpp
arma::mat partialCov_cpp(arma::mat ts, int bw, arma::mat iMatq, arma::mat iMate, int q);
RcppExport SEXP _pcCov_partialCov_cpp(SEXP tsSEXP, SEXP bwSEXP, SEXP iMatqSEXP, SEXP iMateSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type ts(tsSEXP);
    Rcpp::traits::input_parameter< int >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type iMatq(iMatqSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type iMate(iMateSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(partialCov_cpp(ts, bw, iMatq, iMate, q));
    return rcpp_result_gen;
END_RCPP
}
// thetaHat_cpp
double thetaHat_cpp(int i, int j, int l, int m, arma::mat ts, int n, NumericVector hu2s, arma::cube ccMat);
RcppExport SEXP _pcCov_thetaHat_cpp(SEXP iSEXP, SEXP jSEXP, SEXP lSEXP, SEXP mSEXP, SEXP tsSEXP, SEXP nSEXP, SEXP hu2sSEXP, SEXP ccMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ts(tsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hu2s(hu2sSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type ccMat(ccMatSEXP);
    rcpp_result_gen = Rcpp::wrap(thetaHat_cpp(i, j, l, m, ts, n, hu2s, ccMat));
    return rcpp_result_gen;
END_RCPP
}
// deltaHat_cpp
double deltaHat_cpp(int i, int j, int l, int m, arma::mat mvts, int n, NumericVector hu2s, arma::vec ccs, arma::cube ccMat);
RcppExport SEXP _pcCov_deltaHat_cpp(SEXP iSEXP, SEXP jSEXP, SEXP lSEXP, SEXP mSEXP, SEXP mvtsSEXP, SEXP nSEXP, SEXP hu2sSEXP, SEXP ccsSEXP, SEXP ccMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mvts(mvtsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hu2s(hu2sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ccs(ccsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type ccMat(ccMatSEXP);
    rcpp_result_gen = Rcpp::wrap(deltaHat_cpp(i, j, l, m, mvts, n, hu2s, ccs, ccMat));
    return rcpp_result_gen;
END_RCPP
}
// royVar_cpp
arma::mat royVar_cpp(arma::mat iMat, arma::mat tsData, int q, int bw);
RcppExport SEXP _pcCov_royVar_cpp(SEXP iMatSEXP, SEXP tsDataSEXP, SEXP qSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type iMat(iMatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tsData(tsDataSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(royVar_cpp(iMat, tsData, q, bw));
    return rcpp_result_gen;
END_RCPP
}
// royVar2_cpp
arma::mat royVar2_cpp(arma::mat iMat, arma::mat tsData, int q);
RcppExport SEXP _pcCov_royVar2_cpp(SEXP iMatSEXP, SEXP tsDataSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type iMat(iMatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tsData(tsDataSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(royVar2_cpp(iMat, tsData, q));
    return rcpp_result_gen;
END_RCPP
}
// bdiagArray_cpp
arma::mat bdiagArray_cpp(arma::cube array3d);
RcppExport SEXP _pcCov_bdiagArray_cpp(SEXP array3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type array3d(array3dSEXP);
    rcpp_result_gen = Rcpp::wrap(bdiagArray_cpp(array3d));
    return rcpp_result_gen;
END_RCPP
}
// xMaker_cpp
arma::mat xMaker_cpp(int K, int q);
RcppExport SEXP _pcCov_xMaker_cpp(SEXP KSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(xMaker_cpp(K, q));
    return rcpp_result_gen;
END_RCPP
}
// arrayMean_cpp
arma::mat arrayMean_cpp(arma::cube array3d);
RcppExport SEXP _pcCov_arrayMean_cpp(SEXP array3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type array3d(array3dSEXP);
    rcpp_result_gen = Rcpp::wrap(arrayMean_cpp(array3d));
    return rcpp_result_gen;
END_RCPP
}
// upperTri_cpp
arma::vec upperTri_cpp(arma::mat m, bool incDiag);
RcppExport SEXP _pcCov_upperTri_cpp(SEXP mSEXP, SEXP incDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type incDiag(incDiagSEXP);
    rcpp_result_gen = Rcpp::wrap(upperTri_cpp(m, incDiag));
    return rcpp_result_gen;
END_RCPP
}
// thetaUpdate_cpp
arma::cube thetaUpdate_cpp(arma::mat eVec, int K, int q);
RcppExport SEXP _pcCov_thetaUpdate_cpp(SEXP eVecSEXP, SEXP KSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type eVec(eVecSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(thetaUpdate_cpp(eVec, K, q));
    return rcpp_result_gen;
END_RCPP
}
// sigPsiInv_cpp
arma::mat sigPsiInv_cpp(arma::cube sigmas, double sigVal, int qK, int q, int K);
RcppExport SEXP _pcCov_sigPsiInv_cpp(SEXP sigmasSEXP, SEXP sigValSEXP, SEXP qKSEXP, SEXP qSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type sigmas(sigmasSEXP);
    Rcpp::traits::input_parameter< double >::type sigVal(sigValSEXP);
    Rcpp::traits::input_parameter< int >::type qK(qKSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(sigPsiInv_cpp(sigmas, sigVal, qK, q, K));
    return rcpp_result_gen;
END_RCPP
}
// arrayEigen_cpp
arma::field<arma::mat> arrayEigen_cpp(arma::cube array3d);
RcppExport SEXP _pcCov_arrayEigen_cpp(SEXP array3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type array3d(array3dSEXP);
    rcpp_result_gen = Rcpp::wrap(arrayEigen_cpp(array3d));
    return rcpp_result_gen;
END_RCPP
}
// eigen_cpp
arma::field<arma::mat> eigen_cpp(arma::mat myMat);
RcppExport SEXP _pcCov_eigen_cpp(SEXP myMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type myMat(myMatSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_cpp(myMat));
    return rcpp_result_gen;
END_RCPP
}
// sigPsiInvBlks_cpp
arma::cube sigPsiInvBlks_cpp(arma::field<arma::mat> eigs, double sigVal, int q, int K);
RcppExport SEXP _pcCov_sigPsiInvBlks_cpp(SEXP eigsSEXP, SEXP sigValSEXP, SEXP qSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type eigs(eigsSEXP);
    Rcpp::traits::input_parameter< double >::type sigVal(sigValSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(sigPsiInvBlks_cpp(eigs, sigVal, q, K));
    return rcpp_result_gen;
END_RCPP
}
// XtSX_cpp
arma::mat XtSX_cpp(arma::cube blocks, int q, int K);
RcppExport SEXP _pcCov_XtSX_cpp(SEXP blocksSEXP, SEXP qSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type blocks(blocksSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(XtSX_cpp(blocks, q, K));
    return rcpp_result_gen;
END_RCPP
}
// royVcm_cpp
List royVcm_cpp(arma::field<arma::mat> ys, arma::cube sigmas, arma::field<arma::mat> sigEigs, double delta, int maxIters, double sig0);
RcppExport SEXP _pcCov_royVcm_cpp(SEXP ysSEXP, SEXP sigmasSEXP, SEXP sigEigsSEXP, SEXP deltaSEXP, SEXP maxItersSEXP, SEXP sig0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type sigmas(sigmasSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type sigEigs(sigEigsSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type maxIters(maxItersSEXP);
    Rcpp::traits::input_parameter< double >::type sig0(sig0SEXP);
    rcpp_result_gen = Rcpp::wrap(royVcm_cpp(ys, sigmas, sigEigs, delta, maxIters, sig0));
    return rcpp_result_gen;
END_RCPP
}
// listRoyVar_cpp
arma::cube listRoyVar_cpp(arma::field<arma::mat> ys, int q, arma::mat iMat);
RcppExport SEXP _pcCov_listRoyVar_cpp(SEXP ysSEXP, SEXP qSEXP, SEXP iMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type iMat(iMatSEXP);
    rcpp_result_gen = Rcpp::wrap(listRoyVar_cpp(ys, q, iMat));
    return rcpp_result_gen;
END_RCPP
}
// arrayRoyVar_cpp
arma::cube arrayRoyVar_cpp(arma::cube ys, int q, arma::mat iMat);
RcppExport SEXP _pcCov_arrayRoyVar_cpp(SEXP ysSEXP, SEXP qSEXP, SEXP iMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type iMat(iMatSEXP);
    rcpp_result_gen = Rcpp::wrap(arrayRoyVar_cpp(ys, q, iMat));
    return rcpp_result_gen;
END_RCPP
}
// royTest_cpp2
List royTest_cpp2(arma::field<arma::mat> y1, arma::field<arma::mat> y2, arma::mat iMat, double alpha, std::string multAdj, int nperm);
RcppExport SEXP _pcCov_royTest_cpp2(SEXP y1SEXP, SEXP y2SEXP, SEXP iMatSEXP, SEXP alphaSEXP, SEXP multAdjSEXP, SEXP npermSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type iMat(iMatSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type multAdj(multAdjSEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    rcpp_result_gen = Rcpp::wrap(royTest_cpp2(y1, y2, iMat, alpha, multAdj, nperm));
    return rcpp_result_gen;
END_RCPP
}
// dwish_cpp
double dwish_cpp(arma::mat X, int df, arma::mat S, bool log_p);
RcppExport SEXP _pcCov_dwish_cpp(SEXP XSEXP, SEXP dfSEXP, SEXP SSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(dwish_cpp(X, df, S, log_p));
    return rcpp_result_gen;
END_RCPP
}
// dwishArray_cpp
double dwishArray_cpp(arma::cube Xarray, int df, arma::mat S, bool log_p);
RcppExport SEXP _pcCov_dwishArray_cpp(SEXP XarraySEXP, SEXP dfSEXP, SEXP SSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type Xarray(XarraySEXP);
    Rcpp::traits::input_parameter< int >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(dwishArray_cpp(Xarray, df, S, log_p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pcCov_eigen2arma", (DL_FUNC) &_pcCov_eigen2arma, 1},
    {"_pcCov_arma2eigen", (DL_FUNC) &_pcCov_arma2eigen, 1},
    {"_pcCov_eigenMult2", (DL_FUNC) &_pcCov_eigenMult2, 2},
    {"_pcCov_eigenMult3", (DL_FUNC) &_pcCov_eigenMult3, 3},
    {"_pcCov_eigenMult4", (DL_FUNC) &_pcCov_eigenMult4, 4},
    {"_pcCov_invCov2part_cpp", (DL_FUNC) &_pcCov_invCov2part_cpp, 1},
    {"_pcCov_cov2corr_cpp", (DL_FUNC) &_pcCov_cov2corr_cpp, 1},
    {"_pcCov_corrMat_cpp", (DL_FUNC) &_pcCov_corrMat_cpp, 2},
    {"_pcCov_cosTaper_cpp", (DL_FUNC) &_pcCov_cosTaper_cpp, 1},
    {"_pcCov_expTaper_cpp", (DL_FUNC) &_pcCov_expTaper_cpp, 1},
    {"_pcCov_crossCov_cpp", (DL_FUNC) &_pcCov_crossCov_cpp, 3},
    {"_pcCov_crossCov2_cpp", (DL_FUNC) &_pcCov_crossCov2_cpp, 3},
    {"_pcCov_taperCov_cpp", (DL_FUNC) &_pcCov_taperCov_cpp, 3},
    {"_pcCov_taperCovSub_cpp", (DL_FUNC) &_pcCov_taperCovSub_cpp, 4},
    {"_pcCov_upperTriFill_cpp", (DL_FUNC) &_pcCov_upperTriFill_cpp, 2},
    {"_pcCov_partialCov_cpp", (DL_FUNC) &_pcCov_partialCov_cpp, 5},
    {"_pcCov_thetaHat_cpp", (DL_FUNC) &_pcCov_thetaHat_cpp, 8},
    {"_pcCov_deltaHat_cpp", (DL_FUNC) &_pcCov_deltaHat_cpp, 9},
    {"_pcCov_royVar_cpp", (DL_FUNC) &_pcCov_royVar_cpp, 4},
    {"_pcCov_royVar2_cpp", (DL_FUNC) &_pcCov_royVar2_cpp, 3},
    {"_pcCov_bdiagArray_cpp", (DL_FUNC) &_pcCov_bdiagArray_cpp, 1},
    {"_pcCov_xMaker_cpp", (DL_FUNC) &_pcCov_xMaker_cpp, 2},
    {"_pcCov_arrayMean_cpp", (DL_FUNC) &_pcCov_arrayMean_cpp, 1},
    {"_pcCov_upperTri_cpp", (DL_FUNC) &_pcCov_upperTri_cpp, 2},
    {"_pcCov_thetaUpdate_cpp", (DL_FUNC) &_pcCov_thetaUpdate_cpp, 3},
    {"_pcCov_sigPsiInv_cpp", (DL_FUNC) &_pcCov_sigPsiInv_cpp, 5},
    {"_pcCov_arrayEigen_cpp", (DL_FUNC) &_pcCov_arrayEigen_cpp, 1},
    {"_pcCov_eigen_cpp", (DL_FUNC) &_pcCov_eigen_cpp, 1},
    {"_pcCov_sigPsiInvBlks_cpp", (DL_FUNC) &_pcCov_sigPsiInvBlks_cpp, 4},
    {"_pcCov_XtSX_cpp", (DL_FUNC) &_pcCov_XtSX_cpp, 3},
    {"_pcCov_royVcm_cpp", (DL_FUNC) &_pcCov_royVcm_cpp, 6},
    {"_pcCov_listRoyVar_cpp", (DL_FUNC) &_pcCov_listRoyVar_cpp, 3},
    {"_pcCov_arrayRoyVar_cpp", (DL_FUNC) &_pcCov_arrayRoyVar_cpp, 3},
    {"_pcCov_royTest_cpp2", (DL_FUNC) &_pcCov_royTest_cpp2, 6},
    {"_pcCov_dwish_cpp", (DL_FUNC) &_pcCov_dwish_cpp, 4},
    {"_pcCov_dwishArray_cpp", (DL_FUNC) &_pcCov_dwishArray_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_pcCov(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
