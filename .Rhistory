sigmaTildesArray <- array(unlist(asympCovs, recursive = FALSE), dim = c(q, q, sum(Ks)))
XksArray <- array(unlist(Xks, recursive = FALSE), dim = c(N, p, sum(Ks)))
rgksArray <- array(unlist(rgks, recursive = FALSE), dim = c(q, sum(Ks)))
sigmaTildesArrayFisher <- array(unlist(asympCovsFisher, recursive = FALSE), dim = c(q, q, sum(Ks)))
sigmaTildeInvsArrayFisher <- array(unlist(sigmaTildeInvsFisher, recursive = FALSE), dim = c(q, q, sum(Ks)))
rgksArrayFisher <- array(unlist(rgksFisher, recursive = FALSE), dim = c(q, sum(Ks)))
# Implementing normal-normal hierarchical model
Tnn <- normalNormalWald(rgks = rgks, asympCovs = asympCovs,
sigmaTildeInvs = sigmaTildeInvs,
Ks = Ks)
rejects$rejectNn <- Tnn >= qchisq(0.95, df = q)
# Implementing normal-normal hierarchical model w/ Fisher transformation
TnnFisher <- normalNormalWald(rgks = rgksFisher, asympCovs = asympCovsFisher,
sigmaTildeInvs = sigmaTildeInvsFisher,
Ks = Ks)
rejects$rejectNnFisher <- TnnFisher >= qchisq(0.95, df = q)
# Hotelling t-test
suppressWarnings(Th <- Hotelling::hotelling.test(x = t(rgks[[1]]), y = t(rgks[[2]]),
shrinkage = TRUE, perm = FALSE)$stats$statistic)
# Hotelling t-test w/ Fisher transformation
suppressWarnings(ThFisher <- Hotelling::hotelling.test(x = t(rgksFisher[[1]]), y = t(rgksFisher[[2]]),
shrinkage = TRUE, perm = FALSE)$stats$statistic)
# Block-bootstrap
numBoots <- 500
numCores = NULL
# Block-bootstrap
numBoots <- 500
bootRes <- multiBlockBoot(mvts = Xks,
winLength = ceiling(mean(as.numeric(unlist(banws)))),
nboots = numBoots, ncores = numCores)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
# Function for multi-subject block-bootstrap
blockBoot <- function(mvts, winLength, nBoots = 500, stationary = TRUE) {
p <- ncol(mvts)
N <- nrow(mvts)
inds <- seq(1, N)
winLengths <- c()
if(stationary == TRUE) {
# Generating variable block lengths
while(sum(winLengths) < N) {
winLengths <- c(winLengths, min(rgeom(n = 1, prob = 1/winLength), N - 1) + 1)
}
# Number of blocks
nBlocks <- length(winLengths)
} else {
# Number of blocks
nBlocks <- ceiling(N/(winLength))
# Window lengths (block-size) for each block
winLengths <- rep(winLength, times = nBlocks)
}
# Adjusting so sum of window lengths = N
winLengths[nBlocks] <- winLengths[nBlocks] - (sum(winLengths) - N)
wlCumsum <- c(0, cumsum(winLengths))
bstarts <- c()
bends <- c()
binds <- c()
# Block-bootstrap samples
bootSamps <- array(NA, dim = c(N, p, nBoots))
for(boot in 1:nBoots) {
bstarts <- sample(inds, size = nBlocks, replace = TRUE)
bends <- bstarts + winLengths - 1
for(block in 1:nBlocks) {
binds <- ((seq(bstarts[block], bends[block]) - 1) %% N) + 1
bootSamps[(wlCumsum[block] + 1):(wlCumsum[block+1]), , boot] <- mvts[binds, ]
}
}
return(bootSamps)
}
# New simulation function for simulating VAR data with serially correlated errors
myVarSim <- function (nt, coeffMat, covMat, secOrder = FALSE) {
wts <- MASS::mvrnorm(n = nt, mu = rep(0, ncol(covMat)), Sigma = covMat)
ys <- matrix(0, nrow = nt, ncol = ncol(covMat))
ys[1, ] <- wts[1, ]
for (r in 2:nt) {
ys[r, ] <- t(coeffMat %*% ys[r - 1, ]) + wts[r, ] + wts[r - 1, ]*secOrder
}
return(ys)
}
# Testing out function
p <- 4
N <- 300
rho <- 0
mvts <- myVarSim(nt = N, coeffMat = diag(p)*rho, covMat = diag(p), secOrder = FALSE)
nBoots <- 500
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
# Obtaining bootstrap samples
set.seed(1994)
bootSamplesR <- blockBoot(mvts = mvts, winLength = winLength, nBoots = nBoots,
stationary = FALSE)
# Obtaining bootstrap samples using C++
set.seed(1994)
bootSamplesCpp <- blockBoot_cpp(mvts = mvts, winLength = winLength, nBoots = nBoots)
# Trying out covariance matrix
pcsR <- t(sapply(1:nBoots, FUN = function(b) {
pcCov::corrMat_cpp(bootSamplesR[, , b])[upper.tri(diag(p), diag = FALSE)]
}))
cMatR <- cov(pcsR)
pcsCpp <- t(sapply(1:nBoots, FUN = function(b) {
pcCov::corrMat_cpp(bootSamplesCpp[, , b])[upper.tri(diag(p), diag = FALSE)]
}))
cMatCpp <- cov(pcsCpp)
# True covariance matrix
simPcs <- t(sapply(1:10000, FUN = function(x) {
pcCov::corrMat_cpp(myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE))[upper.tri(diag(p), diag = FALSE)]
}))
trueCov <- cov(simPcs)
# Testing if R version of stationary boot strap covariance is right in the long-run
nsims <- 200
avgCovStatCpp <- Reduce(x = lapply(1:nsims, FUN = function(seed) {
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
bootSamplesCpp <- blockBoot_cpp(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = TRUE)
# Calcualting partial correlations
pcsCpp <- t(sapply(1:nBoots, FUN = function(b) {
pcCov::corrMat_cpp(bootSamplesCpp[, , b])[upper.tri(diag(p), diag = FALSE)]
}))
# Covariance estimate for partial correlations
return(cov(pcsCpp))
}), f = '+') / nsims
avgCovStatCpp2 <- Reduce(x = lapply(1:nsims, FUN = function(seed) {
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
bootSamplesCpp <- blockBoot_cpp2(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = TRUE)
# Calcualting partial correlations
pcsCpp <- t(sapply(1:nBoots, FUN = function(b) {
pcCov::corrMat_cpp(bootSamplesCpp[, , b])[upper.tri(diag(p), diag = FALSE)]
}))
# Covariance estimate for partial correlations
return(cov(pcsCpp))
}), f = '+') / nsims
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?blockBoot_cpp
devtools::document()
?blockBoot_cpp
devtools::document()
?blockBoot_cpp
devtools::document()
?blockBoot_cpp
devtools::document()
?blockBoot_cpp
devtools::document()
?blockBoot_cpp
devtools::document()
devtools::document()
devtools::document()
?blockBoot_cpp
devtools::document()
?blockBoot_cpp
devtools::document()
devtools::document()
# Function for multi-subject block-bootstrap
blockBoot <- function(mvts, winLength, nBoots = 500, stationary = TRUE) {
p <- ncol(mvts)
N <- nrow(mvts)
inds <- seq(1, N)
winLengths <- c()
if(stationary == TRUE) {
# Generating variable block lengths
while(sum(winLengths) < N) {
winLengths <- c(winLengths, min(rgeom(n = 1, prob = 1/winLength), N - 1) + 1)
}
# Number of blocks
nBlocks <- length(winLengths)
} else {
# Number of blocks
nBlocks <- ceiling(N/(winLength))
# Window lengths (block-size) for each block
winLengths <- rep(winLength, times = nBlocks)
}
# Adjusting so sum of window lengths = N
winLengths[nBlocks] <- winLengths[nBlocks] - (sum(winLengths) - N)
wlCumsum <- c(0, cumsum(winLengths))
bstarts <- c()
bends <- c()
binds <- c()
# Block-bootstrap samples
bootSamps <- array(NA, dim = c(N, p, nBoots))
for(boot in 1:nBoots) {
bstarts <- sample(inds, size = nBlocks, replace = TRUE)
bends <- bstarts + winLengths - 1
for(block in 1:nBlocks) {
binds <- ((seq(bstarts[block], bends[block]) - 1) %% N) + 1
bootSamps[(wlCumsum[block] + 1):(wlCumsum[block+1]), , boot] <- mvts[binds, ]
}
}
return(bootSamps)
}
# New simulation function for simulating VAR data with serially correlated errors
myVarSim <- function (nt, coeffMat, covMat, secOrder = FALSE) {
wts <- MASS::mvrnorm(n = nt, mu = rep(0, ncol(covMat)), Sigma = covMat)
ys <- matrix(0, nrow = nt, ncol = ncol(covMat))
ys[1, ] <- wts[1, ]
for (r in 2:nt) {
ys[r, ] <- t(coeffMat %*% ys[r - 1, ]) + wts[r, ] + wts[r - 1, ]*secOrder
}
return(ys)
}
# Testing out function
p <- 4
N <- 300
rho <- 0
mvts <- myVarSim(nt = N, coeffMat = diag(p)*rho, covMat = diag(p), secOrder = FALSE)
nBoots <- 500
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
# Obtaining bootstrap samples
set.seed(1994)
bootSamplesR <- blockBoot(mvts = mvts, winLength = winLength, nBoots = nBoots,
stationary = FALSE)
# Obtaining bootstrap samples using C++
set.seed(1994)
bootSamplesCpp <- blockBoot_cpp(mvts = mvts, winLength = winLength, nBoots = nBoots)
# Trying out covariance matrix
pcsR <- t(sapply(1:nBoots, FUN = function(b) {
pcCov::corrMat_cpp(bootSamplesR[, , b])[upper.tri(diag(p), diag = FALSE)]
}))
cMatR <- cov(pcsR)
pcsCpp <- t(sapply(1:nBoots, FUN = function(b) {
pcCov::corrMat_cpp(bootSamplesCpp[, , b])[upper.tri(diag(p), diag = FALSE)]
}))
cMatCpp <- cov(pcsCpp)
# True covariance matrix
simPcs <- t(sapply(1:10000, FUN = function(x) {
pcCov::corrMat_cpp(myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE))[upper.tri(diag(p), diag = FALSE)]
}))
trueCov <- cov(simPcs)
# Testing if R version of stationary boot strap covariance is right in the long-run
nsims <- 300
avgCovStatR <- Reduce(x = lapply(1:nsims, FUN = function(seed) {
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
bootSamplesCpp <- blockBoot(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = TRUE)
# Calcualting partial correlations
pcsCpp <- t(sapply(1:nBoots, FUN = function(b) {
pcCov::corrMat_cpp(bootSamplesCpp[, , b])[upper.tri(diag(p), diag = FALSE)]
}))
# Covariance estimate for partial correlations
return(cov(pcsCpp))
}), f = '+') / nsims
avgCovStatCpp <- Reduce(x = lapply(1:nsims, FUN = function(seed) {
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
bootSamplesCpp <- blockBoot_cpp(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = TRUE)
# Calcualting partial correlations
pcsCpp <- t(sapply(1:nBoots, FUN = function(b) {
pcCov::corrMat_cpp(bootSamplesCpp[, , b])[upper.tri(diag(p), diag = FALSE)]
}))
# Covariance estimate for partial correlations
return(cov(pcsCpp))
}), f = '+') / nsims
# Testing if R version of block boot strap covariance is right in the long-run
avgCovBlockR <- Reduce(x = lapply(1:nsims, FUN = function(seed) {
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
bootSamplesCpp <- blockBoot(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = FALSE)
# Calcualting partial correlations
pcsCpp <- t(sapply(1:nBoots, FUN = function(b) {
pcCov::corrMat_cpp(bootSamplesCpp[, , b])[upper.tri(diag(p), diag = FALSE)]
}))
# Covariance estimate for partial correlations
return(cov(pcsCpp))
}), f = '+') / nsims
avgCovBlockCpp <- Reduce(x = lapply(1:nsims, FUN = function(seed) {
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
bootSamplesCpp <- blockBoot_cpp(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = FALSE)
# Calcualting partial correlations
pcsCpp <- t(sapply(1:nBoots, FUN = function(b) {
pcCov::corrMat_cpp(bootSamplesCpp[, , b])[upper.tri(diag(p), diag = FALSE)]
}))
# Covariance estimate for partial correlations
return(cov(pcsCpp))
}), f = '+') / nsims
# Block boot performance
sqrt(mean((avgCovBlockR - trueCov)^2))
sqrt(mean((avgCovBlockCpp - trueCov)^2))
# Stationary block-boot performance
sqrt(mean((avgCovStatR - trueCov)^2))
sqrt(mean((avgCovStatCpp - trueCov)^2))
avgCovBlockCpp2 <- Reduce(x = lapply(1:nsims, FUN = function(seed) {
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
pcsCpp <- pcCov::blockBootCorr_cpp(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = FALSE)
# Covariance estimate for partial correlations
return(cov(pcsCpp))
}), f = '+') / nsims
# Block boot performance
sqrt(mean((avgCovBlockR - trueCov)^2))
sqrt(mean((avgCovBlockCpp - trueCov)^2))
sqrt(mean((avgCovBlockCpp2 - trueCov)^2))
seed = 1
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
pcsCpp <- pcCov::blockBootCorr_cpp(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = FALSE)
remove(pcsCpp)
remove(seed)
avgCovBlockCpp2 <- Reduce(x = lapply(1:nsims, FUN = function(seed) {
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
pcsCpp <- t(pcCov::blockBootCorr_cpp(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = FALSE))
# Covariance estimate for partial correlations
return(cov(pcsCpp))
}), f = '+') / nsims
sqrt(mean((avgCovBlockCpp2 - trueCov)^2))
# Block boot performance
sqrt(mean((avgCovBlockR - trueCov)^2))
sqrt(mean((avgCovBlockCpp - trueCov)^2))
bench::mark({Reduce(x = lapply(1:5, FUN = function(seed) {
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
bootSamplesCpp <- blockBoot_cpp(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = FALSE)
# Calcualting partial correlations
pcsCpp <- t(sapply(1:nBoots, FUN = function(b) {
pcCov::corrMat_cpp(bootSamplesCpp[, , b])[upper.tri(diag(p), diag = FALSE)]
}))
# Covariance estimate for partial correlations
return(cov(pcsCpp))
}), f = '+') / 5}, {Reduce(x = lapply(1:5, FUN = function(seed) {
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
pcsCpp <- t(pcCov::blockBootCorr_cpp(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = FALSE))
# Covariance estimate for partial correlations
return(cov(pcsCpp))
}), f = '+') / 5})
temp <- bench::mark({Reduce(x = lapply(1:5, FUN = function(seed) {
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
bootSamplesCpp <- blockBoot_cpp(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = FALSE)
# Calcualting partial correlations
pcsCpp <- t(sapply(1:nBoots, FUN = function(b) {
pcCov::corrMat_cpp(bootSamplesCpp[, , b])[upper.tri(diag(p), diag = FALSE)]
}))
# Covariance estimate for partial correlations
return(cov(pcsCpp))
}), f = '+') / 5}, {Reduce(x = lapply(1:5, FUN = function(seed) {
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
pcsCpp <- t(pcCov::blockBootCorr_cpp(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = FALSE))
# Covariance estimate for partial correlations
return(cov(pcsCpp))
}), f = '+') / 5})
temp
View(temp)
?bench::mark
temp <- bench::mark({Reduce(x = lapply(1:5, FUN = function(seed) {
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
bootSamplesCpp <- blockBoot_cpp(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = FALSE)
# Calcualting partial correlations
pcsCpp <- t(sapply(1:nBoots, FUN = function(b) {
pcCov::corrMat_cpp(bootSamplesCpp[, , b])[upper.tri(diag(p), diag = FALSE)]
}))
# Covariance estimate for partial correlations
return(cov(pcsCpp))
}), f = '+') / 5}, {Reduce(x = lapply(1:5, FUN = function(seed) {
set.seed(seed = seed)
# Generating data
mvts <- myVarSim(nt = N, coeffMat = diag(p)*0.50, covMat = diag(p), secOrder = FALSE)
# Optimal bandwidths
winLength <- ceiling(mean(np::b.star(mvts)[, 1]))
pcsCpp <- t(pcCov::blockBootCorr_cpp(mvts = mvts, winLength = winLength, nBoots = nBoots, stationary = FALSE))
# Covariance estimate for partial correlations
return(cov(pcsCpp))
}), f = '+') / 5}, iterations = 5)
View(temp)
str(rep(list(mvts), times = K))
K <- 10
str(rep(list(mvts), times = K))
str(simplify2array(rep(list(mvts), times = K)))
multiRes <- multiBlockBootCorr_cpp(mvtsArray,
winLengths = rep(winLength, times = 10),
nBoots = 500, bool stationary = F)
indRes <- sapply(1:K, FUN = function(k) {
multiBlockBootCorr_cpp(mvts,
winLengths = winLength,
nBoots = 500, bool stationary = F)
})
multiRes <- multiBlockBootCorr_cpp(mvtsArray,
winLengths = rep(winLength, times = 10),
nBoots = 500, stationary = F)
indRes <- sapply(1:K, FUN = function(k) {
multiBlockBootCorr_cpp(mvts,
winLengths = winLength,
nBoots = 500, stationary = F)
})
mvtsArray <- simplify2array(rep(list(mvts), times = K))
multiRes <- multiBlockBootCorr_cpp(mvtsArray,
winLengths = rep(winLength, times = 10),
nBoots = 500, stationary = F)
indRes <- sapply(1:K, FUN = function(k) {
blockBoot_cpp(mvts,
winLengths = winLength,
nBoots = 500, stationary = F)
})
devtools::document()
multiRes <- multiBlockBootCorr_cpp(mvtsArray,
winLengths = rep(winLength, times = 10),
nBoots = 500, stationary = F)
indRes <- sapply(1:K, FUN = function(k) {
blockBoot_cpp(mvts,
winLength = winLength,
nBoots = 500, stationary = F)
})
indRes <- sapply(1:K, FUN = function(k) {
blockBoot_cpp(mvts,
winLength = winLength,
nBoots = 500, stationary = F)
})
multiRes <- multiBlockBootCorr_cpp(mvtsArray,
winLengths = rep(winLength, times = 10),
nBoots = 500, stationary = F)
indRes <- sapply(1:K, FUN = function(k) {
blockBootCorr_cpp(mvts,
winLength = winLength,
nBoots = 500, stationary = F)
})
indRes <- lapply(1:K, FUN = function(k) {
blockBootCorr_cpp(mvts,
winLength = winLength,
nBoots = 500, stationary = F)
})
indRes <- simplify2array(lapply(1:K, FUN = function(k) {
blockBootCorr_cpp(mvts,
winLength = winLength,
nBoots = 500, stationary = F)
}))
temp <- bench::mark({multiBlockBootCorr_cpp(mvtsArray,
winLengths = rep(winLength, times = 10),
nBoots = 500, stationary = F)}, {simplify2array(lapply(1:K, FUN = function(k) {
blockBootCorr_cpp(mvts,
winLength = winLength,
nBoots = 500, stationary = F)
}))}, iterations = 5)
?bench::mark
temp <- bench::mark({multiBlockBootCorr_cpp(mvtsArray,
winLengths = rep(winLength, times = 10),
nBoots = 500, stationary = F)}, {simplify2array(lapply(1:K, FUN = function(k) {
blockBootCorr_cpp(mvts,
winLength = winLength,
nBoots = 500, stationary = F)
}))}, iterations = 5, check = FALSE)
View(temp)
devtools::document()
devtools::document()
